{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,CAAC;AAE9C;;;GAGG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,CAAC","sourcesContent":["/**\n * Constant representing the add action for Apple Wallet.\n * @constant {number}\n */\nexport const APPLE_WALLET_ACTION_TYPE_ADD = 0;\n\n/**\n * Constant representing the pay action for Apple Wallet.\n * @constant {number}\n */\nexport const APPLE_WALLET_ACTION_TYPE_PAY = 1;\n\n/**\n * Interface representing the provisioning data response.\n * @interface ProvisioningDataResponse\n */\nexport interface ProvisioningDataResponse {\n  /**\n   * Nonce used to secure communications.\n   * @type {string}\n   */\n  nonce: string;\n\n  /**\n   * Signature of the nonce for verification.\n   * @type {string}\n   */\n  nonceSignature: string;\n\n  /**\n   * List of certificates used for authentication.\n   * @type {string[]}\n   */\n  certificates: string[];\n}\n\n/**\n * Interface representing the provisioning data request.\n * @interface ProvisioningDataRequest\n */\nexport interface ProvisioningDataRequest {\n  /**\n   * Name of the cardholder.\n   * @type {string}\n   */\n  cardholderName: string;\n\n  /**\n   * Localized description of the card.\n   * @type {string}\n   */\n  localizedDescription: string;\n\n  /**\n   * Payment network (Visa, MasterCard, etc.).\n   * @type {string}\n   */\n  paymentNetwork: string;\n\n  /**\n   * Suffix of the primary account (optional).\n   * @type {string}\n   * @optional\n   */\n  primaryAccountSuffix?: string;\n\n  /**\n   * EncryptionScheme (optional, default is ECC_V2, can be one of ECC_V2 and RSA_V2).\n   * @type {string}\n   * @optional\n   */\n  encryptionScheme?: string;\n}\n\n/**\n * Interface representing the final provisioning data request.\n * @interface ProvisioningFinalDataRequest\n */\nexport interface ProvisioningFinalDataRequest {\n  /**\n   * Encrypted card data.\n   * @type {string}\n   */\n  encryptedPassData: string;\n\n  /**\n   * Ephemeral public key for encryption.\n   * @type {string}\n   */\n  ephemeralPublicKey: string;\n\n  /**\n   * Activation data for the card.\n   * @type {string}\n   */\n  activationData: string;\n}\n\n/**\n * Interface representing the Apple Wallet plugin.\n * @interface TLAppleWalletPlugin\n */\nexport interface TLAppleWalletPlugin {\n  /**\n   * Initializes the plugin.\n   * @returns {Promise<void>} A promise that resolves once initialization is complete.\n   */\n  initialize(): Promise<void>;\n\n  /**\n   * Gets the available actions for a given card suffix.\n   * @param {Object} options - The options to get available actions.\n   * @param {string} options.cardSuffix - The card suffix.\n   * @returns {Promise<{actions: number[]}>} A promise that resolves with the available actions.\n   */\n  getActionsAvailableForCardSuffix(options: { cardSuffix: string }): Promise<{ actions: number[] }>;\n\n  /**\n   * Opens the card with the specified suffix.\n   * @param {Object} options - The options to open the card.\n   * @param {string} options.cardSuffix - The card suffix.\n   * @returns {Promise<void>} A promise that resolves once the card is opened.\n   */\n  openCard(options: { cardSuffix: string }): Promise<void>;\n\n  /**\n   * Starts the process of adding a payment pass.\n   * @param {ProvisioningDataRequest} options - The provisioning data required to add a card.\n   * @returns {Promise<ProvisioningDataResponse>} A promise that resolves with the provisioning data response.\n   */\n  startAddPaymentPass(options: ProvisioningDataRequest): Promise<ProvisioningDataResponse>;\n\n  /**\n   * Completes the process of adding a payment pass.\n   * @param {ProvisioningFinalDataRequest} options - The final provisioning data required to complete the process.\n   * @returns {Promise<void>} A promise that resolves once the provisioning is complete.\n   */\n  completeAddPaymentPass(options: ProvisioningFinalDataRequest): Promise<void>;\n}\n"]}